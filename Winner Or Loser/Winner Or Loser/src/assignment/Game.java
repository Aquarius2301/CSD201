/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment;

import java.awt.Color;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.FileWriter;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author khang
 */
public class Game extends javax.swing.JFrame {

    int i = 0;
    QuestionBank q = new QuestionBank();
    Player player;

    /**
     * Creates new form Game
     */
    public Game() {

        initComponents();
    }

    void loadFile() {
        q.loadFile();
        q.shuffleQuestion();
        jScore.setText(player.score + "");
        jButtonA.setBackground(new Color(240, 240, 240));
        jButtonB.setBackground(new Color(240, 240, 240));
        jButtonC.setBackground(new Color(240, 240, 240));
        jButtonD.setBackground(new Color(240, 240, 240));
        jButtonA.setEnabled(true);
        jButtonB.setEnabled(true);
        jButtonC.setEnabled(true);
        jButtonD.setEnabled(true);

        i = 0;

        jQuestion.setText(q.questionsBank.get(i).question);
        jButtonA.setText(q.questionsBank.get(i).answers[0].getAnswer());
        jButtonB.setText(q.questionsBank.get(i).answers[1].getAnswer());
        jButtonC.setText(q.questionsBank.get(i).answers[2].getAnswer());
        jButtonD.setText(q.questionsBank.get(i).answers[3].getAnswer());
    }

    public void showQuestion() {
        jScore.setText(player.score + "");
        jButtonA.setBackground(new Color(240, 240, 240));
        jButtonB.setBackground(new Color(240, 240, 240));
        jButtonC.setBackground(new Color(240, 240, 240));
        jButtonD.setBackground(new Color(240, 240, 240));
        jButtonA.setEnabled(true);
        jButtonB.setEnabled(true);
        jButtonC.setEnabled(true);
        jButtonD.setEnabled(true);

        i++;
        jQuestion.setText(q.questionsBank.get(i).question);
        jButtonA.setText(q.questionsBank.get(i).answers[0].getAnswer());
        jButtonB.setText(q.questionsBank.get(i).answers[1].getAnswer());
        jButtonC.setText(q.questionsBank.get(i).answers[2].getAnswer());
        jButtonD.setText(q.questionsBank.get(i).answers[3].getAnswer());
    }

    void result(boolean win, boolean change) {
        int score = 0;
        if (!win) {
            if (change) {
                if (player.score < 5) {
                    score = 0;
                } else if (player.score < 10) {
                    score = 5;
                } else {
                    score = 10;
                }
            } else {
                score = player.score;
            }
            savePlayer(player.name, score);
            int option = JOptionPane.showConfirmDialog(null, "Bạn đã thua rồi! Số điểm của bạn là " + score + ". Bạn có muốn chơi tiếp không ?", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                i = -1;
                player.score = 0;
                q.shuffleQuestion();
                jButtonHelp.setEnabled(true);
                jButton50.setEnabled(true);
                jButtonCall.setEnabled(true);
                showQuestion();
            } else {
                System.exit(0);
            }
        } else {
            savePlayer(player.name, 15);
            int option = JOptionPane.showConfirmDialog(null, "Bạn đã là người chiến thắng trò chơi \n"
                    + "- Bạn thật sự là một thiên tài -", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                i = -1;
                player.score = 0;
                q.shuffleQuestion();
                jButtonHelp.setEnabled(true);
                jButton50.setEnabled(true);
                jButtonCall.setEnabled(true);
                showQuestion();
            } else {
                System.exit(0);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jName = new javax.swing.JLabel();
        jScore = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jQuestion = new javax.swing.JTextArea();
        jButtonA = new javax.swing.JButton();
        jButtonB = new javax.swing.JButton();
        jButtonC = new javax.swing.JButton();
        jButtonD = new javax.swing.JButton();
        jButton50 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonSurrender = new javax.swing.JButton();
        jButtonHelp = new javax.swing.JButton();
        jButtonCall = new javax.swing.JButton();
        jButtonScore = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Winner Or Loser");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Tên người chơi: ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 38, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Điểm: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(954, 38, -1, -1));

        jName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jName.setForeground(new java.awt.Color(255, 255, 255));
        jName.setText("Name");
        getContentPane().add(jName, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 38, -1, -1));

        jScore.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jScore.setForeground(new java.awt.Color(255, 255, 255));
        jScore.setText("0");
        getContentPane().add(jScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(1043, 38, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel1.setMaximumSize(new java.awt.Dimension(1133, 292));

        jQuestion.setColumns(20);
        jQuestion.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jQuestion.setLineWrap(true);
        jQuestion.setRows(5);
        jQuestion.setWrapStyleWord(true);
        jQuestion.setMaximumSize(new java.awt.Dimension(1133, 200));
        jQuestion.setPreferredSize(new java.awt.Dimension(1133, 200));
        jQuestion.setEditable(false);
        jScrollPane1.setViewportView(jQuestion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1144, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 111, 1150, -1));

        jButtonA.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonA.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonA, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 416, 550, 80));

        jButtonB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 416, 550, 80));

        jButtonC.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonC.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonC, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 563, 550, 80));

        jButtonD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonD.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonD, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 563, 550, 80));

        jButton50.setText("50-50");
        jButton50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton50ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton50, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 688, 321, 56));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Trợ giúp");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 656, 76, -1));

        jButtonSurrender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonSurrender.setText("Từ bỏ");
        jButtonSurrender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSurrenderActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSurrender, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 182, -1));

        jButtonHelp.setText("Trợ giúp từ khán giả");
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 686, 301, 58));

        jButtonCall.setText("Nhận cuộc gọi");
        jButtonCall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCallActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCall, new org.netbeans.lib.awtextra.AbsoluteConstraints(819, 686, 286, 58));

        jButtonScore.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonScore.setText("Hiện điểm");
        jButtonScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScoreActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(194, 0, 182, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/2.jpg"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAActionPerformed
        jButtonA.setBackground(Color.yellow);
        int option = JOptionPane.showConfirmDialog(null, "Đáp án A có phải là đáp án cuối cùng của bạn", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            if (q.questionsBank.get(i).answers[0].isCorrect()) {
                jButtonA.setBackground(Color.green);
                player.addScore();
                if (player.score == 15) {
                    result(true, false);
                } else {
                    JOptionPane.showMessageDialog(this, "Bạn đã trả lời đúng rồi!!! Hãy qua câu tiếp theo");
                }
                showQuestion();
            } else {
                jButtonA.setBackground(Color.red);
                if (q.questionsBank.get(i).answers[1].isCorrect()) {
                    jButtonB.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[2].isCorrect()) {
                    jButtonC.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[3].isCorrect()) {
                    jButtonD.setBackground(Color.green);
                }
                result(false, true);
            }
        } else {
            jButtonA.setBackground(new Color(240, 240, 240));
        }
    }//GEN-LAST:event_jButtonAActionPerformed


    private void jButtonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBActionPerformed
        jButtonB.setBackground(Color.yellow);
        int option = JOptionPane.showConfirmDialog(null, "Đáp án B có phải là đáp án cuối cùng của bạn", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            if (q.questionsBank.get(i).answers[1].isCorrect()) {
                jButtonB.setBackground(Color.green);
                player.addScore();
                if (player.score == 15) {
                    result(true, false);
                } else {
                    JOptionPane.showMessageDialog(this, "Bạn đã trả lời đúng rồi!!! Hãy qua câu tiếp theo");
                }
                showQuestion();
            } else {
                jButtonB.setBackground(Color.red);
                if (q.questionsBank.get(i).answers[0].isCorrect()) {
                    jButtonA.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[2].isCorrect()) {
                    jButtonC.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[3].isCorrect()) {
                    jButtonD.setBackground(Color.green);
                }
                result(false, true);
            }
        } else {
            jButtonB.setBackground(new Color(240, 240, 240));
        }
    }//GEN-LAST:event_jButtonBActionPerformed

    private void jButtonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCActionPerformed
        jButtonC.setBackground(Color.yellow);
        int option = JOptionPane.showConfirmDialog(null, "Đáp án C có phải là đáp án cuối cùng của bạn", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            if (q.questionsBank.get(i).answers[2].isCorrect()) {
                jButtonC.setBackground(Color.green);
                player.addScore();
                if (player.score == 15) {
                    result(true, false);
                } else {
                    JOptionPane.showMessageDialog(this, "Bạn đã trả lời đúng rồi!!! Hãy qua câu tiếp theo");
                }
                showQuestion();
            } else {
                jButtonC.setBackground(Color.red);
                if (q.questionsBank.get(i).answers[0].isCorrect()) {
                    jButtonA.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[1].isCorrect()) {
                    jButtonB.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[3].isCorrect()) {
                    jButtonD.setBackground(Color.green);
                }
                result(false, true);
            }
        } else {
            jButtonC.setBackground(new Color(240, 240, 240));
        }

    }//GEN-LAST:event_jButtonCActionPerformed

    private void jButtonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDActionPerformed
        jButtonD.setBackground(Color.yellow);
        int option = JOptionPane.showConfirmDialog(null, "Đáp án D có phải là đáp án cuối cùng của bạn", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            if (q.questionsBank.get(i).answers[3].isCorrect()) {
                jButtonD.setBackground(Color.green);
                player.addScore();
                if (player.score == 15) {
                    result(true, false);
                } else {
                    JOptionPane.showMessageDialog(this, "Bạn đã trả lời đúng rồi!!! Hãy qua câu tiếp theo");
                }
                showQuestion();
            } else {
                jButtonD.setBackground(Color.red);
                if (q.questionsBank.get(i).answers[0].isCorrect()) {
                    jButtonA.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[1].isCorrect()) {
                    jButtonB.setBackground(Color.green);
                }
                if (q.questionsBank.get(i).answers[2].isCorrect()) {
                    jButtonC.setBackground(Color.green);
                }
                result(false, true);
            }
        } else {
            jButtonD.setBackground(new Color(240, 240, 240));
        }
    }//GEN-LAST:event_jButtonDActionPerformed

    private void jButton50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton50ActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "50-50 sẽ giúp bạn loại bỏ 2 câu trả lời không chính xác. Bạn có muốn dùng nó không", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            Random random = new Random();
            int dem = 0;
            boolean[] isChoose = new boolean[4];
            do {
                int choose = random.nextInt(4);
                if (!q.questionsBank.get(i).answers[choose].isCorrect() && !isChoose[choose]) {
                    dem++;
                    isChoose[choose] = true;
                    switch (choose) {
                        case 0:
                            jButtonA.setEnabled(false);
                            break;
                        case 1:
                            jButtonB.setEnabled(false);
                            break;
                        case 2:
                            jButtonC.setEnabled(false);
                            break;
                        case 3:
                            jButtonD.setEnabled(false);
                            break;
                    }
                }
            } while (dem != 2);
            jButton50.setEnabled(false);
        }
    }//GEN-LAST:event_jButton50ActionPerformed

    private void jButtonSurrenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSurrenderActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Nếu bạn từ bỏ thì bạn sẽ thua cuộc và giữ nguyên số điểm hiện tại", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            result(false, false);
        }
    }//GEN-LAST:event_jButtonSurrenderActionPerformed

    private void printColor(int m, Color color) {
        if (m == 0) {
            jButtonA.setBackground(color);
        } else if (m == 1) {
            jButtonB.setBackground(color);
        } else if (m == 2) {
            jButtonC.setBackground(color);
        } else {
            jButtonD.setBackground(color);
        }
    }

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Những đáp án sẽ được tô màu từ sáng đến tối, màu sáng nhất sẽ cáo khả năn đúng nhất. Bạn có muốn sử dụng nó không?", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            boolean[] chooseButton = new boolean[4];
            Random random = new Random();
            int n = random.nextInt(60) + 1;
            int m;
            if (n <= 65) {
                if (q.questionsBank.get(i).answers[0].isCorrect()) {
                    jButtonA.setBackground(Color.white);
                    chooseButton[0] = true;
                } else if (q.questionsBank.get(i).answers[1].isCorrect()) {
                    jButtonB.setBackground(Color.white);
                    chooseButton[1] = true;
                } else if (q.questionsBank.get(i).answers[2].isCorrect()) {
                    jButtonC.setBackground(Color.white);
                    chooseButton[2] = true;
                } else {
                    jButtonD.setBackground(Color.white);
                    chooseButton[3] = true;
                }
            } else {
                do {
                    m = random.nextInt(4);
                    if (!chooseButton[m]) {
                        printColor(m, Color.white);
                        chooseButton[m] = true;
                        break;
                    }
                } while (true);
            }

            do {
                m = random.nextInt(4);
                if (!chooseButton[m]) {
                    printColor(m, new Color(165, 165, 165));
                    chooseButton[m] = true;
                    break;
                }
            } while (true);
            do {
                m = random.nextInt(4);
                if (!chooseButton[m]) {
                    printColor(m, new Color(104, 104, 104));
                    chooseButton[m] = true;
                    break;
                }
            } while (true);
            do {
                m = random.nextInt(4);
                if (!chooseButton[m]) {
                    printColor(m, new Color(54, 51, 51));
                    chooseButton[m] = true;
                    break;
                }
            } while (true);
            jButtonHelp.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonHelpActionPerformed

    private void jButtonCallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCallActionPerformed

        int option = JOptionPane.showConfirmDialog(null, "Bạn sẽ nhận được sự trợ giúp từ một người. Bạn có muốn sử dụng nó không?", "Winner Or Loser", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            Random random = new Random();
            int n = random.nextInt(100) + 1;
            String mes = "";
            if (n <= 80) {
                if (q.questionsBank.get(i).answers[0].isCorrect()) {
                    mes = "A";
                } else if (q.questionsBank.get(i).answers[1].isCorrect()) {
                    mes = "B";
                } else if (q.questionsBank.get(i).answers[2].isCorrect()) {
                    mes = "C";
                } else {
                    mes = "D";
                }
            } else {
                int m = 0;
                do {
                    m = random.nextInt(4);
                } while (q.questionsBank.get(m).answers[0].isCorrect());
                if (m == 0) {
                    mes = "A";
                } else if (m == 1) {
                    mes = "B";
                } else if (m == 2) {
                    mes = "C";
                } else {
                    mes = "D";
                }
            }
            JOptionPane.showMessageDialog(this, "Tôi nghĩ đáp án là " + mes);
            jButtonCall.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonCallActionPerformed

    private void jButtonScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScoreActionPerformed
        String s = "Điểm hiện tại của bạn (in đậm là mốc an toàn)<br>";
        for (int j = 0; j < 5; j++) {
            if (player.score == j) {
                s += j + " &lt;-<br>";
            } else {
                s += j + "<br>";
            }
        }
        if (player.score == 5) {
            s += "<b>5</b>" + " &lt;<br>";
        } else {
            s += "<b>5</b>" + " <br>";
        }
        for (int j = 6; j < 10; j++) {
            if (player.score == j) {
                s += j + " &lt;<br>";
            } else {
                s += j + "<br>";
            }
        }
        if (player.score == 10) {
            s += "<b>10</b>" + " &lt;<br>";
        } else {
            s += "<b>10</b>" + " <br>";
        }
        for (int j = 11; j < 15; j++) {
            if (player.score == j) {
                s += j + " &lt;<br>";
            } else {
                s += j + "<br>";
            }
        }
        if (player.score == 15) {
            s += "<b>15</b>" + " &lt;\n";
        } else {
            s += "<b>15</b>" + " \n";
        }
        JOptionPane.showMessageDialog(this, "<html>" + s);
    }//GEN-LAST:event_jButtonScoreActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    @Override
    public void setName(String name) {
        player = new Player(name);
        jName.setText(name);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton50;
    private javax.swing.JButton jButtonA;
    private javax.swing.JButton jButtonB;
    private javax.swing.JButton jButtonC;
    private javax.swing.JButton jButtonCall;
    private javax.swing.JButton jButtonD;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonScore;
    private javax.swing.JButton jButtonSurrender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jQuestion;
    private javax.swing.JLabel jScore;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void savePlayer(String name, int score) {
        try {
            File file = new File("player.txt");
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file, true);
            fw.write("\n" + name + "\t" + score);
            fw.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
